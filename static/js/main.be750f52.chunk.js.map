{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","React","Component","Form","class","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","className","city","temp","sunrise","sunset","error","API_KEY","App","gettingWeather","event","a","preventDefault","target","elements","value","fetch","api_url","json","jsonData","sys","date_1","Date","setTime","sunrise_date","getHours","getMinutes","getSeconds","date_2","sunset_date","console","log","setState","main","undefined","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAoBeA,E,iLAbP,OAGI,6BAEG,6CACA,oE,GAXIC,IAAMC,WCmBVC,E,iLAdP,OAEI,yBAAKC,MAAM,eACP,0BAAMC,SAAWC,KAAKC,MAAMC,eAExB,2BAAOC,KAAM,OAAOC,KAAM,OAAOC,YAAa,SAC9C,sD,GAZDV,IAAMC,WCiCVU,E,iLA3BP,OAII,yBAAKC,UAAU,WAETP,KAAKC,MAAMO,MAET,6BAGI,4CAAkBR,KAAKC,MAAMQ,KAA7B,WACA,wCAAcT,KAAKC,MAAMS,QAAzB,QACA,uCAAaV,KAAKC,MAAMU,OAAxB,SAOR,+BAAKX,KAAKC,MAAMW,MAAhB,U,GAzBMjB,IAAMC,WCKtBiB,EAAU,mCAkHDC,E,YA5Gb,WAAYb,GAAQ,IAAD,8BAEjB,4CAAMA,KAcPc,eAhBkB,uCAgBD,WAAOC,GAAP,+BAAAC,EAAA,yDAChBD,EAAME,mBAEAV,EAAOQ,EAAMG,OAAOC,SAASZ,KAAKa,OAHxB,iCAQdC,MAAM,qDAAD,OAAsDd,EAAtD,kBAAoEK,EAApE,kBARS,cAORU,EAPQ,gBAUSA,EAAQC,OAVjB,OAURC,EAVQ,OAaTf,EAAUe,EAASC,IAAIhB,SACvBiB,EAAY,IAAIC,MACdC,QAAQnB,GACVoB,EAAeH,EAAOI,WAAa,IAAMJ,EAAOK,aAAe,IAAML,EAAOM,aAG7EtB,EAASc,EAASC,IAAIf,QACtBuB,EAAY,IAAIN,MACbC,QAAQlB,GACXwB,EAAcD,EAAOH,WAAa,IAAMG,EAAOF,aAAe,IAAME,EAAOD,aAE/EG,QAAQC,IAAKZ,GAGb,EAAKa,SAAU,CAEb9B,KAAMiB,EAASrB,KACfK,KAAMgB,EAASc,KAAK9B,KACpBC,QAASoB,EACTnB,OAAQwB,EAERvB,MAAO,KAlCK,wBAwCd,EAAK0B,SAAU,CAEb9B,UAAMgC,EACN/B,UAAM+B,EACN9B,aAAS8B,EACT7B,YAAQ6B,EAER5B,MAAO,oBA/CK,4CAhBC,sDAIjB,EAAK6B,MAAQ,CAEXjC,UAAMgC,EACN/B,UAAM+B,EACN9B,aAAS8B,EACT7B,YAAQ6B,EAER5B,WAAO4B,GAXQ,E,sEAwEf,OAGE,yBAAKjC,UAAU,WACb,yBAAKA,UAAU,QAEb,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,kBACf,kBAAE,EAAF,OAIA,yBAAKA,UAAU,kBACb,kBAAE,EAAF,CAAOL,cAAgBF,KAAKe,iBAC5B,kBAAE,EAAF,CACYP,KAAQR,KAAKyC,MAAMjC,KACnBC,KAAQT,KAAKyC,MAAMhC,KACnBC,QAAWV,KAAKyC,MAAM/B,QACtBC,OAAUX,KAAKyC,MAAM9B,OAErBC,MAASZ,KAAKyC,MAAM7B,iB,GA/FpCjB,IAAMC,WCCJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAE,EAAF,MAAUC,SAASC,eAAe,SDsH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be750f52.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Info extends React.Component {\n\n    render() {\n\n        // CAN RETUTN ONLY ONE PARRENT ELEMENT\n        return(\n\n             // ONE GENERAL/PARRENT TAG CAN BE RETURNED\n            <div>\n               \n               <h1> Weather App </h1>\n               <p> Find weather in yor location ! </p>\n            </div>\n        )\n    }\n}\n\n\nexport default Info;","import React from \"react\";  \nclass Form extends React.Component {    \n\n    \n    render() {\n\n        // CAN RETUTN ONLY ONE PARRENT ELEMENT\n        return(\n\n            <div class=\"input__form\">\n                <form onSubmit= {this.props.weatherMethod} >\n\n                    <input type= \"text\" name= \"city\" placeholder= \"city\" />\n                    <button> Get Wether </button>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nclass Weather extends React.Component {\n\n    render() {\n\n        // CAN RETUTN ONLY ONE PARRENT ELEMENT\n        return(\n\n             // ONE GENERAL/PARRENT TAG CAN BE RETURNED\n             \n            <div className='weather'>\n\n                { this.props.city  &&\n\n                    <div>\n\n                        {/* <p>  {this.props.city} </p> */}\n                        <p> Temperature: {this.props.temp} &deg;C </p>  \n                        <p> Sunrise: {this.props.sunrise} am </p>  \n                        <p> Sunset: {this.props.sunset} pm </p>  \n\n\n                    </div>\n                }\n                \n                {/* IF CITY IS NOT CHOSEN */}\n                <p> {this.props.error} </p>\n               \n            </div>\n        )\n    }\n}\n\nexport default Weather;","import React from \"react\";\n\nimport Info from \"./components/Info.js\"\nimport Form from \"./components/Form.js\"\nimport Weather from \"./components/Weather.js\"\n\n// API KEY\nconst API_KEY = \"fec3d813e8930919b9f55a93b65ad231\"; //https://openweathermap.org\n// https://openweathermap.org/current -> DOCUMENTATION\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n    // STATE\n    this.state = {\n\n      city: undefined,\n      temp: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n  \n      error: undefined\n    }\n\n  }\n\n   gettingWeather = async (event) => {\n    event.preventDefault();\n\n    const city = event.target.elements.city.value ;\n\n    if( city ) {\n\n      const api_url = await\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n\n      const jsonData = await api_url.json();\n\n      //// TIME SPAN    \n      let  sunrise = jsonData.sys.sunrise;\n      let  date_1    = new Date();\n      date_1.setTime(sunrise);\n      let  sunrise_date = date_1.getHours() + \":\" + date_1.getMinutes() + \":\" + date_1.getSeconds();\n     \n      //// TIME SPAN\n      var sunset = jsonData.sys.sunset;\n      var date_2    = new Date();\n      date_2.setTime(sunset);\n      var sunset_date = date_2.getHours() + \":\" + date_2.getMinutes() + \":\" + date_2.getSeconds();\n      \n      console.log( jsonData );\n\n      //// SET_STATE\n      this.setState( {\n\n        city: jsonData.name,\n        temp: jsonData.main.temp,\n        sunrise: sunrise_date,\n        sunset: sunset_date,\n\n        error: \"\"\n      } );\n      \n    }\n    else {\n\n      this.setState( {\n\n        city: undefined,\n        temp: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n\n        error: \"Choose the city\"\n    } );\n    \n    }\n  }\n\n    render() {\n\n      // CAN RETUTN ONLY ONE PARRENT ELEMENT\n      return( \n\n        // ONE GENERAL/PARRENT TAG CAN BE RETURNED\n        <div className=\"wrapper\"> \n          <div className=\"main\">\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-5 info \">\n                    < Info />\n\n                    </div>\n\n                    <div className=\"col-sm-7 form \" >\n                      < Form weatherMethod= {this.gettingWeather} />\n                      < Weather   \n                                  city = {this.state.city}\n                                  temp = {this.state.temp}\n                                  sunrise = {this.state.sunrise}\n                                  sunset = {this.state.sunset}\n\n                                  error = {this.state.error}\n                          />\n                    </div>\n                </div>\n            </div>\n          \n          \n          </div>\n          \n        </div>\n        \n      )\n  }\n}\n\nexport default App;\n\n// weatherMethod= {this.gettingWeather}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport\"./App.css\";\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}